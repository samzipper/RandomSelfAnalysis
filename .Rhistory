geom_vline(xintercept = dates_all, color = col.cat.red)
ggplot(daily_hrs, aes(x = date, y = hours_worked, fill = Daytype)) +
geom_col(color = NA) +
scale_x_datetime(name = "Day", expand = c(0, 0), limits = date_limits) +
scale_y_continuous(name = "Hours Worked") +
scale_fill_manual(name = "Day Type", values = c("conference" = col.cat.yel,
"weekend" = col.cat.blu,
"day off" = col.cat.grn,
"work" = col.cat.red,
"half day" = col.cat.org)) +
geom_hline(yintercept = 8, color = col.gray) +
geom_vline(xintercept = dates_all, color = "black") +
theme(legend.position = "bottom")
# summarize by activity
work_by_activity <-
all_work %>%
dplyr::group_by(Activity) %>%
dplyr::summarize(Hours = n()*0.5,
PrcTime = Hours/sum(weekly_hrs$hours_worked)) %>%
dplyr::arrange(-Hours)
# weekly percent for each column
work_by_week <-
all_work %>%
dplyr::group_by(week_start_date) %>%
dplyr::summarize(halfhrs = n(),
conference = sum(Activity=="conference")/halfhrs,
logistics = sum(Activity=="logistics")/halfhrs,
mentees = sum(Activity=="mentees")/halfhrs,
research = sum(Activity=="research")/halfhrs,
service = sum(Activity=="service")/halfhrs,
talking = sum(Activity=="talking")/halfhrs) %>%
dplyr::select(-halfhrs) %>%
tidyr::pivot_longer(all_of(work_by_activity$Activity), names_to = "Activity", values_to = "Time_Prc")
# set factor to order by most to least common
work_by_activity$Activity <- factor(work_by_activity$Activity, levels = work_by_activity$Activity)
all_work$Activity <- factor(all_work$Activity, levels = work_by_activity$Activity)
all_work$Activity <- factor(all_work$Activity, levels = work_by_activity$Activity)
work_by_week$Activity <- factor(work_by_week$Activity, levels = rev(work_by_activity$Activity))
ggplot(work_by_activity, aes(x = Activity, y = Hours, fill = Activity)) +
geom_col() +
scale_y_continuous(name = "Hours") +
scale_fill_manual(values = pal_activity, guide = F)
ggplot(work_by_week, aes(x = week_start_date, y = Time_Prc, fill = Activity)) +
geom_area(position = "stack") +
scale_x_datetime(name = "Week", expand = c(0,0), limits = date_limits) +
scale_y_continuous(name = "Time Spent [%]", expand = c(0,0),
labels = scales::percent) +
scale_fill_manual(values = pal_activity) +
geom_vline(xintercept = dates_all, color = "black") +
theme(legend.position = "bottom")
ggplot(subset(work_by_week, Activity %in% c("research", "logistics", "talking")),
aes(x = week_start_date, y = Time_Prc, color = Activity)) +
geom_point() +
scale_x_datetime(name = "Week", expand = c(0,0), limits = date_limits) +
scale_y_continuous(name = "Time Spent [%]", expand = c(0,0),
labels = scales::percent) +
scale_color_manual(values = pal_activity) +
stat_smooth(method = "lm", formula = "y ~ x") +
theme(legend.position = "bottom")
ggplot(daily_hrs, aes(x = Day, y = week_start_date, fill = hours_worked_cut)) +
geom_raster() +
scale_x_discrete(expand = c(0, 0)) +
scale_y_datetime(name = "Week", expand = c(0, 0), limits = rev(date_limits)) +
scale_fill_manual(name = "Daily Hours Worked",
values = c("gray65", "#ffffb2", "#fecc5c", "#fd8d3c", "#e31a1c")) +
theme(legend.position = "bottom")
ggplot(daily_hrs, aes(x = Day, y = week_start_date, fill = hours_worked_cut)) +
geom_raster() +
scale_x_discrete(expand = c(0, 0)) +
scale_y_datetime(name = "Week", expand = c(0, 0), limits = date_limits) +
scale_fill_manual(name = "Daily Hours Worked",
values = c("gray65", "#ffffb2", "#fecc5c", "#fd8d3c", "#e31a1c")) +
theme(legend.position = "bottom")
ggplot(daily_hrs, aes(x = Day, y = week_start_date, fill = hours_worked_cut)) +
geom_raster() +
scale_x_discrete(expand = c(0, 0)) +
scale_y_datetime(name = "Week", expand = c(0, 0), limits = date_limits) +
scale_fill_manual(name = "Daily Hours Worked",
values = c("gray65", "#ffffb2", "#fecc5c", "#fd8d3c", "#e31a1c")) +
theme(legend.position = "bottom")
ggplot(weekly_hrs, aes(x = week_start_date, y = hours_worked)) +
geom_col(color = NA, fill = col.cat.blu) +
scale_x_datetime(name = "Week", expand = c(0, 0), limits = date_limits) +
scale_y_continuous(name = "Hours Worked in Week") +
geom_hline(yintercept = 40, color = col.gray)
weekday_hours <-
all_weeks %>%
subset(Daytype = "work") %>%
subset(Activity != "Not Work") %>%
dplyr::group_by(Time) %>%
dplyr::summarize(hours_worked = n()*0.5)
ggplot(weekday_hours, aes(x = 1, y = Time, fill = hours_worked)) +
geom_raster()
names(all_weeks)
ggplot(weekday_hours, aes(x = 1, y = Time, fill = hours_worked/length(unique(all_weeks$date)))) +
geom_raster()
ggplot(weekday_hours, aes(x = 1, y = Time, fill = hours_worked/sum(daily_hrs$Daytype=="work"))) +
geom_raster()
ggplot(weekday_hours, aes(x = 1, y = Time, fill = hours_worked*2/sum(daily_hrs$Daytype=="work"))) +
geom_raster()
weekday_hours <-
all_weeks %>%
subset(Daytype = "work") %>%
subset(Activity != "Not Work") %>%
dplyr::group_by(Time) %>%
dplyr::summarize(days_worked = n())
ggplot(weekday_hours, aes(x = 1, y = Time, fill = days_worked/sum(daily_hrs$Daytype=="work"))) +
geom_raster()
View(weekday_hours)
sum(daily_hrs$Daytype=="work")
View(daily_hrs)
weekday_hours <-
all_weeks %>%
subset(Daytype = "work")
weekday_hours <-
all_weeks %>%
subset(Daytype = "work") %>%
subset(Activity != "Not Work")
length(unique(weekday_hours$date))
unique(weekday_hours$Daytype)
weekday_hours <-
all_weeks %>%
subset(Daytype == "work") %>%
subset(Activity != "Not Work") %>%
dplyr::group_by(Time) %>%
dplyr::summarize(days_worked = n())
ggplot(weekday_hours, aes(x = 1, y = Time, fill = days_worked/sum(daily_hrs$Daytype=="work"))) +
geom_raster()
ggplot(weekday_hours, aes(x = 1, y = Time, fill = days_worked/sum(daily_hrs$Daytype=="work"))) +
geom_raster() +
scale_fill_viridis_c(name = "% of Workdays Worked") +
theme(legend.position = "bottom")
ggplot(weekday_hours, aes(x = Inf, y = Time, fill = days_worked/sum(daily_hrs$Daytype=="work"))) +
geom_raster() +
scale_x_continuous(name = NULL) +
scale_fill_viridis_c(name = "% of Workdays Worked") +
theme(legend.position = "bottom") +
NULL
ggplot(weekday_hours, aes(x = NULL, y = Time, fill = days_worked/sum(daily_hrs$Daytype=="work"))) +
geom_raster() +
scale_x_continuous(name = NULL) +
scale_fill_viridis_c(name = "% of Workdays Worked") +
theme(legend.position = "bottom") +
NULL
ggplot(weekday_hours, aes(x = 1, y = Time, fill = days_worked/sum(daily_hrs$Daytype=="work"))) +
geom_raster() +
scale_x_continuous(name = NULL) +
scale_fill_viridis_c(name = "% of Workdays Worked") +
theme(legend.position = "bottom",
axis.text.x = element_blank(),
axis.title.x = element_blank(),
axis.ticks.x = element_blank()) +
NULL
ggplot(weekday_hours, aes(x = 1, y = Time, fill = days_worked/sum(daily_hrs$Daytype=="work"))) +
geom_raster() +
scale_x_continuous(name = NULL) +
scale_fill_viridis_c(name = "% of Workdays Worked",
labels = scales::percent) +
theme(legend.position = "bottom",
axis.text.x = element_blank(),
axis.title.x = element_blank(),
axis.ticks.x = element_blank()) +
NULL
ggplot(weekday_hours, aes(x = 1, y = Time, fill = days_worked/sum(daily_hrs$Daytype=="work"))) +
geom_raster() +
scale_x_continuous(name = NULL) +
scale_fill_viridis_c(name = "% of Workdays Worked",
labels = scales::percent, limits = c(0, 1)) +
theme(legend.position = "bottom",
axis.text.x = element_blank(),
axis.title.x = element_blank(),
axis.ticks.x = element_blank()) +
NULL
ggplot(weekday_hours, aes(x = 1, y = Time, fill = days_worked/sum(daily_hrs$Daytype=="work"))) +
geom_raster() +
scale_x_continuous(name = NULL) +
scale_fill_viridis_c(name = "% of Workdays Worked",
labels = scales::percent,
limits = c(0, 1), breaks = c(0, 0.5, 1)) +
theme(legend.position = "bottom",
axis.text.x = element_blank(),
axis.title.x = element_blank(),
axis.ticks.x = element_blank()) +
NULL
ggplot(weekday_hours, aes(x = 1, y = Time, fill = days_worked/sum(daily_hrs$Daytype=="work"))) +
geom_raster() +
scale_x_continuous(name = NULL) +
scale_fill_viridis_c(name = "% of work days I was\nworking at this time",
labels = scales::percent,
limits = c(0, 1), breaks = c(0, 0.5, 1)) +
theme(legend.position = "bottom",
axis.text.x = element_blank(),
axis.title.x = element_blank(),
axis.ticks.x = element_blank()) +
NULL
weekend_hours <-
all_weeks %>%
subset(Daytype %in% c("weekend", "day off")) %>%
subset(Activity != "Not Work") %>%
dplyr::group_by(Time) %>%
dplyr::summarize(days_worked = n())
ggplot(weekend_hours, aes(x = 1, y = Time, fill = days_worked/sum(daily_hrs$Daytype %in% c("weekend", "day off")))) +
geom_raster() +
scale_x_continuous(name = NULL) +
scale_fill_viridis_c(name = "% of days off I was\nworking at this time",
labels = scales::percent,
limits = c(0, 1), breaks = c(0, 0.5, 1)) +
theme(legend.position = "bottom",
axis.text.x = element_blank(),
axis.title.x = element_blank(),
axis.ticks.x = element_blank()) +
NULL
ggplot(weekend_hours, aes(x = 1, y = Time, fill = days_worked/sum(daily_hrs$Daytype %in% c("weekend", "day off")))) +
geom_raster() +
scale_x_continuous(name = NULL) +
scale_fill_viridis_c(name = "% of days off I was\nworking at this time",
labels = scales::percent) +
theme(legend.position = "bottom",
axis.text.x = element_blank(),
axis.title.x = element_blank(),
axis.ticks.x = element_blank()) +
NULL
library(tidyverse)
library(googlesheets4)
# deauthorize - no need to write or read private sheets
gs4_deauth()
## first: do 2021
sheet_url <- "https://docs.google.com/spreadsheets/d/1cE-u8IsB96H01Y-3G3_JeL8AugWl2oJEPOJDEMtraj0/edit#gid=2092721761"
sheet_info <- gs4_get(sheet_url)
tabs_all <-
sheet_info$sheets %>%
subset(name != "template")
w <- 1
# figure out when this week starts
week_start_date <- lubridate::mdy(tabs_all$name[w])
# read google sheet
data <- read_sheet(sheet_url, sheet = tabs_all$name[w], range = "A3:H38", col_types = "cccccccc")
daytype <- read_sheet(sheet_url, sheet = tabs_all$name[w], range = "B2:H2",
col_names = c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"))
# read google sheet
data <- read_sheet(sheet_url, sheet = tabs_all$name[w], range = "A3:H40", col_types = "cccccccc")
View(data)
daytype <- read_sheet(sheet_url, sheet = tabs_all$name[w], range = "B2:H2",
col_names = c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"))
View(daytype)
# transform to long-form and combine
daytype_long <-
tibble::tibble(Day = colnames(daytype),
Daytype = c(as.character(daytype[1,])))
data_long <-
reshape2::melt(data, id = "Time", value.name = "Activity", variable.name = "Day")
week_summary <-
dplyr::left_join(data_long, daytype_long, by = "Day") %>%
replace_na(list("Activity" = "Not Work")) %>%
dplyr::mutate(week_start_date = week_start_date)
View(week_summary)
for (w in 1:length(tabs_all$name)){
# figure out when this week starts
week_start_date <- lubridate::mdy(tabs_all$name[w])
# read google sheet
data <- read_sheet(sheet_url, sheet = tabs_all$name[w], range = "A3:H40", col_types = "cccccccc")
daytype <- read_sheet(sheet_url, sheet = tabs_all$name[w], range = "B2:H2",
col_names = c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"))
# transform to long-form and combine
daytype_long <-
tibble::tibble(Day = colnames(daytype),
Daytype = c(as.character(daytype[1,])))
data_long <-
reshape2::melt(data, id = "Time", value.name = "Activity", variable.name = "Day")
week_summary <-
dplyr::left_join(data_long, daytype_long, by = "Day") %>%
replace_na(list("Activity" = "Not Work")) %>%
dplyr::mutate(week_start_date = week_start_date)
if (w == 1){
all_weeks <- week_summary
} else {
all_weeks <-
dplyr::bind_rows(week_summary, all_weeks)
}
# pause to avoid rate limit
Sys.sleep(8)
}
# save 2020 output
write_csv(all_weeks, "WorkTimeAnalysis_Hours_2021.csv")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(lubridate)
library(patchwork)
## ggplot theme
windowsFonts(Arial=windowsFont("TT Arial"))
theme_scz <- function(...){
theme_bw(base_size=10, base_family="Arial") +
theme(
text=element_text(color="black"),
plot.title=element_text(face="bold", size=rel(1)),
axis.title=element_text(face="bold", size=rel(1)),
axis.text=element_text(size=rel(1)),
strip.text=element_text(size=rel(1)),
legend.title=element_text(face="bold", size=rel(1)),
legend.text=element_text(size=rel(1)),
panel.grid=element_blank(),
plot.margin=unit(c(1,1,1,1), "mm"),
strip.background=element_blank())
}
theme_set(theme_scz())
# color palette
col.cat.grn <- "#3cb44b"   # green
col.cat.yel <- "#ffe119"   # yellow
col.cat.org <- "#f58231"   # orange
col.cat.red <- "#e6194b"   # red
col.cat.blu <- "#0082c8"   # blue
col.gray <- "gray65"       # gray for annotation lines, etc
# colors by activity
pal_activity <-
c("research" = "#e41a1c",
"logistics" = "#377eb8",
"talking" = "#4daf4a",
"conference" = "#984ea3",
"service" = "#ff7f00",
"mentees" = "#ffff33",
"field" = "darkslategray")
# date limits for plots
date_limits <- as.POSIXct(c(ymd("2019-01-01"), ymd("2022-01-02")))
# load 2019 and 2020 data
all_weeks_19 <- read_csv("https://raw.github.com/samzipper/SelfAnalysis/master/WorkTimeAnalysis_Hours_2019.csv", col_types = "ccccT")
all_weeks_20 <- read_csv("https://raw.github.com/samzipper/SelfAnalysis/master/WorkTimeAnalysis_Hours_2020.csv", col_types = "ccccT")
all_weeks_21 <- read_csv("https://raw.github.com/samzipper/SelfAnalysis/master/WorkTimeAnalysis_Hours_2021.csv", col_types = "ccccT")
# combine years
all_weeks <-
all_weeks_19 %>%
dplyr::bind_rows(all_weeks_20) %>%
dplyr::bind_rows(all_weeks_21) %>%
subset(!is.na(Time))
# set factors for plotting
all_weeks$Day <- factor(all_weeks$Day, levels = c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"))
all_weeks$Time <- factor(all_weeks$Time, levels = unique(all_weeks$Time))
# lump 'Travel' with 'Not Work' because I usually sleep on planes, and if I was working on the plane I coded it as such
all_weeks$Activity[all_weeks$Activity == "travel"] <- "Not Work"
# lump 'field' with 'research'
#all_weeks$Activity[all_weeks$Activity == "field"] <- "research"
# data frame with just work hours
all_work <- all_weeks[all_weeks$Activity != "Not Work", ]
# count hours worked
hrs_worked <- sum(all_weeks$Activity != "Not Work")*0.5  # data is at half-hour intervals
n_weeks <- length(unique(all_weeks$week_start_date))
# summarize by week
weekly_hrs <-
all_weeks %>%
dplyr::group_by(week_start_date) %>%
dplyr::summarize(hours_worked = sum(Activity != "Not Work")*0.5) %>%
dplyr::mutate(Year = lubridate::year(week_start_date))
# median and mode
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
median_hrs_wk <- median(weekly_hrs$hours_worked)
mode_hrs_wk <- getmode(weekly_hrs$hours_worked)
# make a column for the actual date
day_to_number <- tibble(Day = c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"),
DayNum = seq(0,6))
all_weeks <-
dplyr::left_join(all_weeks, day_to_number, by = "Day") %>%
dplyr::mutate(date = week_start_date + days(DayNum))
# summarize by day
daily_hrs <-
all_weeks %>%
dplyr::group_by(date, Day, week_start_date, Daytype) %>%
dplyr::summarize(hours_worked = sum(Activity != "Not Work")*0.5) %>%
dplyr::mutate(hours_worked_cut = cut(hours_worked, c(0, 0.25, 2, 6, 9, 24), include.lowest = T,
labels = c("0", "0.5 - 2", "2.5 - 6", "6.5 - 9", "> 9.5")),
Year = lubridate::year(date))
daily_hrs$Day <- factor(daily_hrs$Day, levels = c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"))
# calculate work hours and days
work_hours <- sum(daily_hrs$hours_worked[daily_hrs$Daytype != "conference"])
work_days <- sum(daily_hrs$Daytype == "work") + sum(daily_hrs$Daytype == "half day")*0.5
weekend_hours <- sum(daily_hrs$hours_worked[daily_hrs$Daytype == "weekend"])
weekend_days <- sum(daily_hrs$Daytype == "weekend")
off_days <- sum(daily_hrs$Daytype == "day off")
nowork_days <- sum(daily_hrs$hours_worked == 0)
# to count consecutive days worked/not worked, make a column that is just "0 or not"
daily_hrs$zero <- daily_hrs$hours_worked==0
daily_hrs$zero_counter <- sequence(rle(as.character(daily_hrs$zero))$lengths)
# find max consecutive days worked and not worked
max_days_off <- max(daily_hrs$zero_counter[daily_hrs$zero])
max_days_on <- max(daily_hrs$zero_counter[!daily_hrs$zero])
max_days_off_2021 <- max(subset(daily_hrs, Year == 2021 & zero)$zero_counter)
max_days_on_2021 <- max(subset(daily_hrs, Year == 2021 & !zero)$zero_counter)
max_days_off_not2021 <- max(subset(daily_hrs, Year %in% c(2019, 2020) & zero)$zero_counter)
max_days_on_not2021 <- max(subset(daily_hrs, Year %in% c(2019, 2020) & !zero)$zero_counter)
ggplot(weekly_hrs, aes(x = week_start_date, y = hours_worked)) +
geom_col(color = NA, fill = col.cat.blu) +
scale_x_datetime(name = "Week", expand = c(0, 0), limits = date_limits) +
scale_y_continuous(name = "Hours Worked in Week") +
geom_hline(yintercept = 40, color = col.gray)
ggplot(subset(daily_hrs, Daytype != "conference" & Year != 2022), aes(x = hours_worked, fill = hours_worked_cut)) +
geom_histogram(binwidth = 0.5) +
geom_vline(xintercept = 8, color = "black") +
scale_x_continuous(name = "Hours Worked", expand = c(0, 0)) +
scale_y_continuous(name = "Number of Days") +
scale_fill_manual(name = "Daily Hours Worked",
values = c("gray65", "#ffffb2", "#fecc5c", "#fd8d3c", "#e31a1c")) +
facet_wrap(~Year, ncol = 1, scales = "free_x") +
labs(title = "Daily hours worked by year",
subtitle = "Vertical line at 8 hours")
ggplot(daily_hrs, aes(x = Day, y = week_start_date, fill = hours_worked_cut)) +
geom_tile() +
scale_x_discrete(expand = c(0, 0)) +
scale_y_datetime(name = "Week", expand = c(0, 0), limits = date_limits) +
scale_fill_manual(name = "Daily Hours Worked",
values = c("gray65", "#ffffb2", "#fecc5c", "#fd8d3c", "#e31a1c")) +
theme(legend.position = "bottom") +
labs(title = "Daily hours worked by day")
# summarize by activity
work_by_activity <-
all_work %>%
dplyr::group_by(Activity) %>%
dplyr::summarize(Hours = n()*0.5,
PrcTime = Hours/sum(weekly_hrs$hours_worked)) %>%
dplyr::arrange(-Hours)
# yearly percent for each activity
work_by_year <-
all_work %>%
dplyr::mutate(Year = lubridate::year(week_start_date)) %>%
dplyr::group_by(Year) %>%
dplyr::summarize(halfhrs = n(),
conference = sum(Activity=="conference")/halfhrs,
logistics = sum(Activity=="logistics")/halfhrs,
mentees = sum(Activity=="mentees")/halfhrs,
field = sum(Activity=="field")/halfhrs,
research = sum(Activity=="research")/halfhrs,
service = sum(Activity=="service")/halfhrs,
talking = sum(Activity=="talking")/halfhrs) %>%
dplyr::select(-halfhrs) %>%
tidyr::pivot_longer(all_of(work_by_activity$Activity), names_to = "Activity", values_to = "Time_Prc")
# weekly percent for each activity
work_by_week <-
all_work %>%
dplyr::group_by(week_start_date) %>%
dplyr::summarize(halfhrs = n(),
conference = sum(Activity=="conference")/halfhrs,
logistics = sum(Activity=="logistics")/halfhrs,
mentees = sum(Activity=="mentees")/halfhrs,
field = sum(Activity=="field")/halfhrs,
research = sum(Activity=="research")/halfhrs,
service = sum(Activity=="service")/halfhrs,
talking = sum(Activity=="talking")/halfhrs) %>%
dplyr::select(-halfhrs) %>%
tidyr::pivot_longer(all_of(work_by_activity$Activity), names_to = "Activity", values_to = "Time_Prc")
# set factor to order by most to least common
work_by_activity$Activity <- factor(work_by_activity$Activity, levels = work_by_activity$Activity)
all_work$Activity <- factor(all_work$Activity, levels = work_by_activity$Activity)
all_work$Activity <- factor(all_work$Activity, levels = work_by_activity$Activity)
work_by_week$Activity <- factor(work_by_week$Activity, levels = rev(work_by_activity$Activity))
# number of field work days in each year
n_field_days_2021 <- dim(unique(subset(all_work, Activity == "field" & lubridate::year(week_start_date) == 2021)[,c("Day", "week_start_date")]))[1]
n_field_days_2020 <- dim(unique(subset(all_work, Activity == "field" & lubridate::year(week_start_date) == 2020)[,c("Day", "week_start_date")]))[1]
n_field_days_2019 <- dim(unique(subset(all_work, Activity == "field" & lubridate::year(week_start_date) == 2019)[,c("Day", "week_start_date")]))[1]
all_work %>%
dplyr::mutate(Year = lubridate::year(week_start_date)) %>%
ggplot(aes(x = Year, fill = Activity)) +
geom_bar() +
scale_y_continuous(name = "Half-Hours") +
scale_fill_manual(values = pal_activity)
View(work_by_year)
subset(work_by_year, Year == 2021)
sum(subset(work_by_year, Year == 2021)$Time_Prc)
ggplot(work_by_week, aes(x = week_start_date, y = Time_Prc, color = Activity)) +
geom_point() +
scale_x_datetime(name = "Week", expand = c(0,0), limits = date_limits) +
scale_y_continuous(name = "Time Spent [%]", expand = c(0,0), limits = c(0,1),
labels = scales::percent) +
facet_wrap(~Activity, scales = "free", ncol = 2) +
scale_color_manual(values = pal_activity) +
#stat_smooth(formula = "y ~ x") +
theme(legend.position = "bottom") +
labs(title = "Weekly percent time by activity")
ggplot(work_by_week, aes(x = week_start_date, y = Time_Prc, color = Activity)) +
geom_point() +
scale_x_datetime(name = "Week", expand = c(0,0), limits = date_limits) +
scale_y_continuous(name = "Time Spent [%]", expand = c(0,0), limits = c(0,1),
labels = scales::percent) +
facet_wrap(~Activity, scales = "free", ncol = 3) +
scale_color_manual(values = pal_activity) +
#stat_smooth(formula = "y ~ x") +
theme(legend.position = "bottom") +
labs(title = "Weekly percent time by activity")
# linear trend for research and logistics
lm_research <-
work_by_week %>%
subset(Activity == "research") %>%
lm(Time_Prc ~ week_start_date, data = .)
slope_research <- coef(lm_research)[2]*60*60*24*7*100
lm_logistics <-
work_by_week %>%
subset(Activity == "logistics") %>%
lm(Time_Prc ~ week_start_date, data = .)
slope_logistics <- coef(lm_logistics)[2]*60*60*24*7*100
# evening work, excluding field, conference, and travel
evening_work <-
all_weeks %>%
subset(Time %in% levels(all_weeks$Time)[21:35]) %>%
subset(!(Activity %in% c("Not Work", "field", "conference", "travel"))) %>%
mutate(Year = lubridate::year(week_start_date),
Month = lubridate::month(week_start_date),
YM = ymd(paste0(Year, "-", Month, "-01")))
ggplot(subset(evening_work, Year >= 2020), aes(x = YM, fill = Activity)) +
geom_bar() +
scale_y_continuous(name = "Half-Hours Worked After 5 PM") +
scale_x_date(name = "Year-Month") +
scale_fill_manual(values = pal_activity) +
labs(title = "Monthly evening work")
